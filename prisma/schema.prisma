datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id           Int      @id @default(autoincrement())
  password     String
  name         String   @unique
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id           Int            @id @default(autoincrement())
  telegramId   String         @unique
  username     String?
  firstName    String
  lastName     String
  lastActiveAt DateTime?
  email        String?        @unique
  phoneNumber  String         @unique
  inGroup      Boolean        @default(false)
  status       UserStatus     @default(REGISTERED)
  role         UserRole       @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription Subscription[]
  messageUser  MessageUser[]
  transaction  Transaction[]
}

model Subscription {
  id                 Int      @id @default(autoincrement())
  userId             Int
  transactionId      Int      @unique
  expiredDate        DateTime
  startDate          DateTime
  alertCount         Int      @default(0)
  subscriptionTypeId Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User             @relation(fields: [userId], references: [id])
  subscriptionType SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])
  transaction      Transaction      @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id                 Int               @id @default(autoincrement())
  price              Int
  transactionId      String?
  status             TransactionStatus @default(Created)
  paymentType        PaymentType
  userId             Int
  subscriptionTypeId Int
  type               TransactionType   @default(NORMAL)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user             User             @relation(fields: [userId], references: [id])
  subscriptionType SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])
  subscription     Subscription?
}

model SubscriptionType {
  id            Int            @id @default(autoincrement())
  price         Int
  title         String
  description   String
  expireDays    Int            @default(30)
  subscriptions Subscription[]
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Transaction   Transaction[]
}

model Settings {
  id                   Int    @id @default(autoincrement())
  aboutAminGroup       String
  aboutKozimxonTorayev String
}

model Message {
  id        Int           @id @default(autoincrement())
  text      String
  users     MessageUser[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model MessageUser {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  status    MessageStatus
  message   Message?      @relation(fields: [messageId], references: [id])
  messageId Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum UserStatus {
  REGISTERED
  SUBSCRIBE
  EXPIRED
  INACTIVE
  UNSUBSCRIBE
}

enum MessageStatus {
  PENDING
  NOTSENT
  DELIVERED
  READ
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentType {
  ATMOS
  STRIPE
  OCTOBANK
}

enum TransactionType {
  AUTO
  NORMAL
}

enum TransactionStatus {
  Created
  Paid
  Failed
  Canceled
}
